---
import Button from "@components/nav/Button.astro";
import { v2 as cloudinary } from "cloudinary";

cloudinary.config({
    cloud_name: import.meta.env.ASTRO_PUBLIC_CLOUDINARY_CLOUD_NAME,
    api_key: import.meta.env.ASTRO_PUBLIC_CLOUDINARY_API_KEY,
    api_secret: import.meta.env.CLOUDINARY_API_SECRET,
});

interface CloudinaryResource {
    is_audio: boolean;
    display_name: string;
    public_id: string;
    secure_url: string;
    bytes: number;
}

let { resources } = (await cloudinary.api.resources({
    resource_type: "video",
})) as { resources: CloudinaryResource[] };
resources = resources.filter((item) => item.bytes !== 0);
---

<table class="w-full">
    <thead>
        <tr
            class="border-b border-brand-white-dark text-left font-mono uppercase text-brand-black [&_th]:font-normal"
        >
            <th></th>
            <th>Filename</th>
            <th>Duration</th>
            <th></th>
        </tr>
    </thead>
    <tbody class="font-mono font-normal uppercase">
        {
            resources.map((file) => (
                <tr class="group relative border-b border-brand-white-dark hover:bg-brand-white-dark/20">
                    <td class="py-2 pl-2">
                        <Button
                            variant="ghost"
                            class="file-button font-mono uppercase"
                            data-url={file.secure_url}
                            data-filename={file.public_id}
                        >
                            [Play]
                        </Button>
                    </td>
                    <td class="py-2">
                        <p class="w-fit bg-brand-black text-brand-real-white">
                            {file.display_name}
                        </p>
                    </td>
                    <td class="py-2">
                        <p
                            id={`duration-${file.public_id}`}
                            class="w-fit bg-brand-black text-brand-real-white"
                        >
                            0:00
                        </p>
                    </td>
                    <td class="flex justify-end gap-2 py-2 pr-2 [&_button]:font-sans">
                        <Button
                            class="download-webm"
                            data-url={file.secure_url}
                            data-filename={file.display_name}
                        >
                            webm
                        </Button>
                    </td>
                </tr>
            ))
        }
    </tbody>
</table>

<script>
    import { Howl } from "howler";
    import { formatDuration, downloadResource } from "@/lib/functions";

    document.addEventListener("DOMContentLoaded", () => {
        const playButton =
            document.querySelectorAll<HTMLButtonElement>(".file-button");
        const sounds: { [key: string]: Howl } = {};

        const webmButton =
            document.querySelectorAll<HTMLButtonElement>(".download-webm");

        webmButton.forEach((button) => {
            const url = button.dataset.url;
            const filename = button.dataset.filename;
            if (!url || !filename) return;

            button.addEventListener("click", () => {
                downloadResource(url, `${filename}.webm`);
            });
        });

        playButton.forEach((button) => {
            const url = button.dataset.url;
            const filename = button.dataset.filename;
            if (!url || !filename) return;

            sounds[filename] = new Howl({
                src: [url],
                html5: true,
                onload: () => {
                    const durationElement = document.getElementById(
                        `duration-${filename}`
                    );
                    if (durationElement && sounds[filename]) {
                        durationElement.innerText = formatDuration(
                            sounds[filename].duration()
                        );
                    }
                },
                onplay: () => {
                    button.innerText = "[Stop]";
                },
                onstop: () => {
                    button.innerText = "[Play]";
                },
                onend: () => {
                    button.innerText = "[Play]";
                },
            });

            button.addEventListener("click", () => {
                Object.values(sounds).forEach((sound) => {
                    if (sound !== sounds[filename] && sound.playing()) {
                        sound.stop();
                    }
                });

                sounds[filename]?.playing()
                    ? sounds[filename].stop()
                    : sounds[filename]?.play();
            });
        });
    });
</script>
